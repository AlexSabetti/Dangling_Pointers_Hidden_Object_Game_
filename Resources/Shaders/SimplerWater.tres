[gd_resource type="VisualShader" load_steps=69 format=3 uid="uid://ma2k5f1xlay6"]

[ext_resource type="Texture2D" uid="uid://c4xsp2m35s3lh" path="res://Resources/Textures/bumpMaps/Cellular_noise_texture_2d.tres" id="1_ykr5c"]
[ext_resource type="Texture2D" uid="uid://l7mira0smbu4" path="res://Resources/Textures/bumpMaps/Foam_noise_texture_2d.tres" id="2_roadk"]

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_22wv0"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_54p5i"]
parameter_name = "foamSpeed"
default_value_enabled = true
default_value = 0.25

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_blrca"]
parameter_name = "foamDistance"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_xpf1u"]
function = 12

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_5fdnu"]
default_input_values = [0, 0.0, 1, 0.05, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(1, 1, 1), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_8kbhe"]
parameter_name = "foam_albedo2"
default_value_enabled = true
default_value = Color(0.534487, 0.771221, 0.775025, 1)

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_m5kxp"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_3ndru"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(1.25, 1.25, 1.25, 1.25)]
op_type = 2
operator = 5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_vyc5r"]
constant = 2.0

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_y0qtt"]
default_input_values = [0, 0.0, 1, 0.0, 2, 0.7]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_nb1sf"]
texture = ExtResource("1_ykr5c")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_55ajw"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(1.25, 1.25, 1.25, 1.25)]
op_type = 2
operator = 5

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_cqoqp"]
texture = ExtResource("1_ykr5c")

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ekt3b"]
parameter_name = "albedo2"
default_value_enabled = true
default_value = Color(0.298039, 0.505882, 0.509804, 1)

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_4tjtt"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_uj4hy"]
parameter_name = "Alpha"
hint = 1
default_value_enabled = true
default_value = 0.8

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_erc3i"]
parameter_name = "Metallic"
hint = 1
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_4qyow"]
parameter_name = "Roughness"
hint = 1
default_value_enabled = true
default_value = 0.2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_rv0wc"]

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_5ja52"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_ograv"]
parameter_name = "fresnel_amount"
default_value_enabled = true
default_value = 5.0

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_vj5he"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, 0.5]
op_type = 4

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_dvrpe"]
parameter_name = "albedo"
default_value_enabled = true
default_value = Color(0.168627, 0.352941, 0.411765, 1)

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_isesc"]
size = Vector2(740, 380)
expression = "// time calculations for wave normal map movement
vec2 time = (TIME * wave_direction1) * time_scale;	// movement rate of first wave
vec2 time2 = (TIME * wave_direction2) * time_scale;	// movement rate of second wave

// Blend the two normal maps
normal_blend = mix(texture(texture_normal, world_pos.xz / noise_scale + time).rgb, texture(texture_normal2, world_pos.xz + time2).rgb, 0.5);"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_pjf86"]
size = Vector2(880, 480)
expression = "// Depth variables and calc
float depth_texture = texture(DEPTH_TEXTURE, SCREEN_UV).x;
vec3 ndc = vec3(SCREEN_UV * 2.0 - 1.0, depth_texture);
vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0); 
view.xyz /= view.w;
float depth_blend = exp((-view.z+VERTEX.z + depth_offset) * -beers_law);
depth_blend = clamp(1.0 - depth_blend, 0.0, 1.0);
float depth_blend_power = clamp(pow(depth_blend, 2.5), 0.0, 1.0);
	
// Retreving depth color and applying the deep and shallow colors
vec3 screen_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, depth_blend_power * 2.5).rgb;
vec3 depth_color = mix(color_shallow.rgb, color_deep.rgb, depth_blend_power);
color = mix(screen_color * depth_color, depth_color * 0.25, depth_blend_power * 0.5);"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_3tg32"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.75, 0.75, 0.75)]
op_type = 3

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_p5308"]
parameter_name = "color_deep"
default_value_enabled = true
default_value = Color(0.168627, 0.352941, 0.411765, 1)

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_tjhqu"]
parameter_name = "color_shallow"
default_value_enabled = true
default_value = Color(0.298039, 0.505882, 0.509804, 1)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_el2eh"]
input_name = "time"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_vujdd"]
size = Vector2(420, 360)
expression = "wave_direct1 = wave_direction1;
wave_direct2 = wave_direction2;
time_scal = time_scale;
world_position = world_pos.xz / noise_scale;
"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_gdg2l"]
operator = 2

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_w3cyd"]
parameter_name = "foam_albedo"
default_value_enabled = true
default_value = Color(0.534487, 0.771221, 0.775025, 1)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_ai8em"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_5ojcq"]
parameter_name = "PeakFoamModifier"
default_value_enabled = true
default_value = 3.0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_ndcm7"]
parameter_name = "Specular"
hint = 1
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeProximityFade" id="VisualShaderNodeProximityFade_587a6"]
default_input_values = [0, 0.5]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_hhvxq"]
function = 31

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5u5go"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_40sev"]
default_input_values = [0, 0.0, 1, 2.0]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_2i56u"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_6noys"]
function = 0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_pstdn"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0.5, 1)]
op_type = 0
operator = 3

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_kifhl"]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_4mmds"]
default_input_values = [0, 0.0, 1, 24.0]
operator = 5

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_s002r"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_tsi4f"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_nauul"]
constant = 5.0

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_nm88d"]
default_input_values = [0, 0.0, 1, 0.25, 2, 0.0]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_omqtp"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeReroute" id="VisualShaderNodeReroute_5c2os"]
default_input_values = [0, Vector4(0, 0, 0, 0)]
port_type = 5

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_tb3wm"]
texture = ExtResource("2_roadk")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_8csm5"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(1, 1, 1, 1)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_7jm2e"]

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_5yx47"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7n8no"]
input_name = "time"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_mwsgt"]
size = Vector2(420, 360)
expression = "wave_direct1 = wave_direction1;
wave_direct2 = wave_direction2;
time_scal = time_scale;
world_position = world_pos.xz / noise_scale;
"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_a3ld1"]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_wj8vf"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0.5, 1)]
op_type = 0
operator = 3

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ifwh1"]
texture = ExtResource("2_roadk")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_wrlom"]
operator = 2

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_5qa8l"]
default_input_values = [0, 0.0, 1, 0.5, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(1, 1, 1), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_28gx1"]
size = Vector2(840, 760)
expression = "//uniform vec3 albedo : source_color;
//uniform vec3 albedo2 : source_color;
//uniform float metallic : hint_range(0.0, 1.0) = 0;
//uniform float roughness : hint_range(0.0, 1.0) = 0.02;
//uniform float fresnel_amount = 5.0;
uniform sampler2D wave;
uniform sampler2D texture_normal;
uniform sampler2D texture_normal2;
uniform vec2 wave_direction1 = vec2(2.0,0.0);
uniform vec2 wave_direction2 = vec2(0.0,1.0);
uniform float time_scale : hint_range(0.0, 0.2, 0.005) = 0.01;
uniform float noise_scale = 10.0;
uniform float height_scale = 0.15;

uniform sampler2D DEPTH_TEXTURE: hint_depth_texture, filter_linear_mipmap;
uniform sampler2D SCREEN_TEXTURE: hint_screen_texture, filter_linear_mipmap;

//uniform vec4 color_deep : source_color;	// Deep depth color
//uniform vec4 color_shallow : source_color;	// Shallow depth color
uniform float beers_law = 2.0; // Attenuation of light
uniform float depth_offset = -0.75;	// Offset

//uniform vec3 edge_color : source_color;
//uniform float edge_scale = 0.1;
//uniform float near = 1.0;
//uniform float far = 100.0;

// varying variables
varying float height;
varying vec3 world_pos; "

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_la4nk"]
size = Vector2(676.759, 323.455)
expression = "world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
height = texture(wave, world_pos.xz / noise_scale + TIME * time_scale).r;
output = height * height_scale;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_onabr"]
expanded_output_ports = [0]
input_name = "vertex"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_3c0sg"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_6r17w"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_toon, specular_toon;

uniform vec4 color_deep : source_color = vec4(0.168627, 0.352941, 0.411765, 1.000000);
uniform vec4 color_shallow : source_color = vec4(0.298039, 0.505882, 0.509804, 1.000000);
uniform vec4 albedo : source_color = vec4(0.168627, 0.352941, 0.411765, 1.000000);
uniform vec4 albedo2 : source_color = vec4(0.298039, 0.505882, 0.509804, 1.000000);
uniform float fresnel_amount = 5;
uniform vec4 foam_albedo : source_color = vec4(0.534487, 0.771221, 0.775025, 1.000000);
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_12;
uniform float PeakFoamModifier = 3;
uniform vec4 foam_albedo2 : source_color = vec4(0.534487, 0.771221, 0.775025, 1.000000);
uniform sampler2D tex_frg_88;
uniform sampler2D tex_frg_96;
uniform float foamDistance = 1;
uniform sampler2D depth_tex_frg_65 : hint_depth_texture;
uniform float Alpha : hint_range(0, 1) = 0.80000001192093;
uniform float Metallic : hint_range(0, 1) = 0;
uniform float Roughness : hint_range(0, 1) = 0.20000000298023;
uniform float Specular : hint_range(0, 1) = 1;


// GlobalExpression:0
	//uniform vec3 albedo : source_color;
	//uniform vec3 albedo2 : source_color;
	//uniform float metallic : hint_range(0.0, 1.0) = 0;
	//uniform float roughness : hint_range(0.0, 1.0) = 0.02;
	//uniform float fresnel_amount = 5.0;
	uniform sampler2D wave;
	uniform sampler2D texture_normal;
	uniform sampler2D texture_normal2;
	uniform vec2 wave_direction1 = vec2(2.0,0.0);
	uniform vec2 wave_direction2 = vec2(0.0,1.0);
	uniform float time_scale : hint_range(0.0, 0.2, 0.005) = 0.01;
	uniform float noise_scale = 10.0;
	uniform float height_scale = 0.15;
	
	uniform sampler2D DEPTH_TEXTURE: hint_depth_texture, filter_linear_mipmap;
	uniform sampler2D SCREEN_TEXTURE: hint_screen_texture, filter_linear_mipmap;
	
	//uniform vec4 color_deep : source_color;	// Deep depth color
	//uniform vec4 color_shallow : source_color;	// Shallow depth color
	uniform float beers_law = 2.0; // Attenuation of light
	uniform float depth_offset = -0.75;	// Offset
	
	//uniform vec3 edge_color : source_color;
	//uniform float edge_scale = 0.1;
	//uniform float near = 1.0;
	//uniform float far = 100.0;
	
	// varying variables
	varying float height;
	varying vec3 world_pos; 

void vertex() {
// Input:29
	vec3 n_out29p0 = VERTEX;
	float n_out29p1 = n_out29p0.r;
	float n_out29p2 = n_out29p0.g;
	float n_out29p3 = n_out29p0.b;


	float n_out28p0;
// Expression:28
	n_out28p0 = 0.0;
	{
		world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
		height = texture(wave, world_pos.xz / noise_scale + TIME * time_scale).r;
		n_out28p0 = height * height_scale;
	}


// FloatOp:30
	float n_out30p0 = n_out28p0 + n_out29p2;


// VectorCompose:34
	vec3 n_out34p0 = vec3(n_out29p1, n_out30p0, n_out29p3);


// Output:0
	VERTEX = n_out34p0;


}

void fragment() {
// ColorParameter:56
	vec4 n_out56p0 = color_deep;


// ColorParameter:57
	vec4 n_out57p0 = color_shallow;


	vec3 n_out54p0;
// Expression:54
	n_out54p0 = vec3(0.0, 0.0, 0.0);
	{
		// Depth variables and calc
		float depth_texture = texture(DEPTH_TEXTURE, SCREEN_UV).x;
		vec3 ndc = vec3(SCREEN_UV * 2.0 - 1.0, depth_texture);
		vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0); 
		view.xyz /= view.w;
		float depth_blend = exp((-view.z+VERTEX.z + depth_offset) * -beers_law);
		depth_blend = clamp(1.0 - depth_blend, 0.0, 1.0);
		float depth_blend_power = clamp(pow(depth_blend, 2.5), 0.0, 1.0);
			
		// Retreving depth n_out54p0 and applying the deep and shallow colors
		vec3 screen_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, depth_blend_power * 2.5).rgb;
		vec3 depth_color = mix(vec3(n_out57p0.xyz).rgb, vec3(n_out56p0.xyz).rgb, depth_blend_power);
		n_out54p0 = mix(screen_color * depth_color, depth_color * 0.25, depth_blend_power * 0.5);
	}


// ColorParameter:5
	vec4 n_out5p0 = albedo;


// ColorParameter:23
	vec4 n_out23p0 = albedo2;


// FloatParameter:41
	float n_out41p0 = fresnel_amount;


// Fresnel:40
	float n_out40p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_out41p0);


// Mix:46
	vec3 n_out46p0 = mix(vec3(n_out5p0.xyz), vec3(n_out23p0.xyz), n_out40p0);


// ColorParameter:61
	vec4 n_out61p0 = foam_albedo;


// Reroute:85
	vec4 n_out85p0 = n_out61p0;


	vec2 n_out59p0;
	vec2 n_out59p1;
	float n_out59p2;
	vec2 n_out59p3;
// Expression:59
	n_out59p0 = vec2(0.0, 0.0);
	n_out59p1 = vec2(0.0, 0.0);
	n_out59p2 = 0.0;
	n_out59p3 = vec2(0.0, 0.0);
	{
		n_out59p0 = wave_direction1;
		n_out59p1 = wave_direction2;
		n_out59p2 = time_scale;
		n_out59p3 = world_pos.xz / noise_scale;
		
	}


// Input:58
	float n_out58p0 = TIME;


// FloatOp:60
	float n_out60p0 = n_out58p0 * n_out59p2;


// UVFunc:8
	vec2 n_out8p0 = vec2(n_out60p0) * n_out59p0 + n_out59p3;


// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, n_out8p0);


// VectorOp:72
	vec2 n_in72p1 = vec2(0.50000, 1.00000);
	vec2 n_out72p0 = n_out59p3 / n_in72p1;


// UVFunc:10
	vec2 n_out10p0 = vec2(n_out60p0) * n_out59p1 + n_out72p0;


// Texture2D:12
	vec4 n_out12p0 = texture(tex_frg_12, n_out10p0);


// VectorOp:7
	vec4 n_out7p0 = n_out2p0 * n_out12p0;


// FloatParameter:63
	float n_out63p0 = PeakFoamModifier;


// VectorOp:18
	vec4 n_out18p0 = pow(n_out7p0, vec4(n_out63p0));


// VectorOp:24
	vec4 n_out24p0 = n_out85p0 * n_out18p0;


// VectorOp:4
	vec3 n_out4p0 = vec3(n_out5p0.xyz) + vec3(n_out24p0.xyz);


// Mix:62
	vec3 n_in62p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out62p0 = mix(n_out46p0, n_out4p0, n_in62p2);


// Mix:55
	vec3 n_in55p2 = vec3(0.75000, 0.75000, 0.75000);
	vec3 n_out55p0 = mix(n_out54p0, n_out62p0, n_in55p2);


// ColorParameter:104
	vec4 n_out104p0 = foam_albedo2;


	vec2 n_out93p0;
	vec2 n_out93p1;
	float n_out93p2;
	vec2 n_out93p3;
// Expression:93
	n_out93p0 = vec2(0.0, 0.0);
	n_out93p1 = vec2(0.0, 0.0);
	n_out93p2 = 0.0;
	n_out93p3 = vec2(0.0, 0.0);
	{
		n_out93p0 = wave_direction1;
		n_out93p1 = wave_direction2;
		n_out93p2 = time_scale;
		n_out93p3 = world_pos.xz / noise_scale;
		
	}


// Input:92
	float n_out92p0 = TIME;


// FloatOp:94
	float n_out94p0 = n_out92p0 * n_out93p2;


// UVFunc:90
	vec2 n_out90p0 = vec2(n_out94p0) * n_out93p0 + n_out93p3;


// Texture2D:88
	vec4 n_out88p0 = texture(tex_frg_88, n_out90p0);


// VectorOp:95
	vec2 n_in95p1 = vec2(0.50000, 1.00000);
	vec2 n_out95p0 = n_out93p3 / n_in95p1;


// UVFunc:91
	vec2 n_out91p0 = vec2(n_out94p0) * n_out93p1 + n_out95p0;


// Texture2D:96
	vec4 n_out96p0 = texture(tex_frg_96, n_out91p0);


// VectorOp:105
	vec4 n_out105p0 = n_out88p0 * n_out96p0;


// FloatConstant:107
	float n_out107p0 = 2.000000;


// VectorOp:106
	vec4 n_out106p0 = pow(n_out105p0, vec4(n_out107p0));


// FloatParameter:101
	float n_out101p0 = foamDistance;


	float n_out65p0;
// ProximityFade:65
	{
		float __depth_tex = texture(depth_tex_frg_65, SCREEN_UV).r;
		vec4 __depth_world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, __depth_tex, 1.0);
		__depth_world_pos.xyz /= __depth_world_pos.w;
		n_out65p0 = clamp(1.0 - smoothstep(__depth_world_pos.z + n_out101p0, __depth_world_pos.z, VERTEX.z), 0.0, 1.0);
	}


// FloatFunc:66
	float n_out66p0 = 1.0 - n_out65p0;


// FloatOp:98
	float n_out98p0 = n_out106p0.x * n_out66p0;


// FloatOp:79
	float n_in79p1 = 24.00000;
	float n_out79p0 = pow(n_out66p0, n_in79p1);


// FloatOp:80
	float n_out80p0 = n_out98p0 + n_out79p0;


// Clamp:108
	float n_in108p1 = 0.00000;
	float n_in108p2 = 0.70000;
	float n_out108p0 = clamp(n_out80p0, n_in108p1, n_in108p2);


// Mix:84
	vec3 n_out84p0 = mix(n_out55p0, vec3(n_out104p0.xyz), vec3(n_out108p0));


// FloatParameter:36
	float n_out36p0 = Alpha;


// FloatParameter:37
	float n_out37p0 = Metallic;


// FloatParameter:38
	float n_out38p0 = Roughness;


// FloatParameter:64
	float n_out64p0 = Specular;


	vec3 n_out53p0;
// Expression:53
	n_out53p0 = vec3(0.0, 0.0, 0.0);
	{
		// time calculations for wave normal map movement
		vec2 time = (TIME * wave_direction1) * time_scale;	// movement rate of first wave
		vec2 time2 = (TIME * wave_direction2) * time_scale;	// movement rate of second wave
		
		// Blend the two normal maps
		n_out53p0 = mix(texture(texture_normal, world_pos.xz / noise_scale + time).rgb, texture(texture_normal2, world_pos.xz + time2).rgb, 0.5);
	}


// Output:0
	ALBEDO = n_out84p0;
	ALPHA = n_out36p0;
	METALLIC = n_out37p0;
	ROUGHNESS = n_out38p0;
	SPECULAR = n_out64p0;
	NORMAL_MAP = n_out53p0;


}
"
graph_offset = Vector2(-692.776, -1511.67)
modes/diffuse = 3
modes/specular = 1
nodes/vertex/0/position = Vector2(667.762, 136.117)
nodes/vertex/26/node = SubResource("VisualShaderNodeGlobalExpression_28gx1")
nodes/vertex/26/position = Vector2(-2280, -1000)
nodes/vertex/26/size = Vector2(840, 760)
nodes/vertex/26/input_ports = ""
nodes/vertex/26/output_ports = ""
nodes/vertex/26/expression = "//uniform vec3 albedo : source_color;
//uniform vec3 albedo2 : source_color;
//uniform float metallic : hint_range(0.0, 1.0) = 0;
//uniform float roughness : hint_range(0.0, 1.0) = 0.02;
//uniform float fresnel_amount = 5.0;
uniform sampler2D wave;
uniform sampler2D texture_normal;
uniform sampler2D texture_normal2;
uniform vec2 wave_direction1 = vec2(2.0,0.0);
uniform vec2 wave_direction2 = vec2(0.0,1.0);
uniform float time_scale : hint_range(0.0, 0.2, 0.005) = 0.01;
uniform float noise_scale = 10.0;
uniform float height_scale = 0.15;

uniform sampler2D DEPTH_TEXTURE: hint_depth_texture, filter_linear_mipmap;
uniform sampler2D SCREEN_TEXTURE: hint_screen_texture, filter_linear_mipmap;

//uniform vec4 color_deep : source_color;	// Deep depth color
//uniform vec4 color_shallow : source_color;	// Shallow depth color
uniform float beers_law = 2.0; // Attenuation of light
uniform float depth_offset = -0.75;	// Offset

//uniform vec3 edge_color : source_color;
//uniform float edge_scale = 0.1;
//uniform float near = 1.0;
//uniform float far = 100.0;

// varying variables
varying float height;
varying vec3 world_pos; "
nodes/vertex/28/node = SubResource("VisualShaderNodeExpression_la4nk")
nodes/vertex/28/position = Vector2(-578.577, -241.25)
nodes/vertex/28/size = Vector2(676.759, 323.455)
nodes/vertex/28/input_ports = ""
nodes/vertex/28/output_ports = "0,0,output;"
nodes/vertex/28/expression = "world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
height = texture(wave, world_pos.xz / noise_scale + TIME * time_scale).r;
output = height * height_scale;"
nodes/vertex/29/node = SubResource("VisualShaderNodeInput_onabr")
nodes/vertex/29/position = Vector2(-119.654, 123.295)
nodes/vertex/30/node = SubResource("VisualShaderNodeFloatOp_3c0sg")
nodes/vertex/30/position = Vector2(200.986, 51.93)
nodes/vertex/34/node = SubResource("VisualShaderNodeVectorCompose_6r17w")
nodes/vertex/34/position = Vector2(416.249, 116.854)
nodes/vertex/connections = PackedInt32Array(29, 2, 30, 1, 34, 0, 0, 0, 30, 0, 34, 1, 29, 1, 34, 0, 29, 3, 34, 2, 28, 0, 30, 0)
nodes/fragment/0/position = Vector2(1020, 140)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_cqoqp")
nodes/fragment/2/position = Vector2(-1540, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorOp_rv0wc")
nodes/fragment/4/position = Vector2(-220, 80)
nodes/fragment/5/node = SubResource("VisualShaderNodeColorParameter_dvrpe")
nodes/fragment/5/position = Vector2(-740, -580)
nodes/fragment/7/node = SubResource("VisualShaderNodeVectorOp_2i56u")
nodes/fragment/7/position = Vector2(-1280, 380)
nodes/fragment/8/node = SubResource("VisualShaderNodeUVFunc_s002r")
nodes/fragment/8/position = Vector2(-1840, 340)
nodes/fragment/10/node = SubResource("VisualShaderNodeUVFunc_22wv0")
nodes/fragment/10/position = Vector2(-1840, 620)
nodes/fragment/12/node = SubResource("VisualShaderNodeTexture_nb1sf")
nodes/fragment/12/position = Vector2(-1540, 520)
nodes/fragment/18/node = SubResource("VisualShaderNodeVectorOp_55ajw")
nodes/fragment/18/position = Vector2(-1040, 380)
nodes/fragment/23/node = SubResource("VisualShaderNodeColorParameter_ekt3b")
nodes/fragment/23/position = Vector2(-740, -380)
nodes/fragment/24/node = SubResource("VisualShaderNodeVectorOp_4tjtt")
nodes/fragment/24/position = Vector2(-700, 160)
nodes/fragment/36/node = SubResource("VisualShaderNodeFloatParameter_uj4hy")
nodes/fragment/36/position = Vector2(-440, 560)
nodes/fragment/37/node = SubResource("VisualShaderNodeFloatParameter_erc3i")
nodes/fragment/37/position = Vector2(-200, 640)
nodes/fragment/38/node = SubResource("VisualShaderNodeFloatParameter_4qyow")
nodes/fragment/38/position = Vector2(40, 720)
nodes/fragment/40/node = SubResource("VisualShaderNodeFresnel_5ja52")
nodes/fragment/40/position = Vector2(-680, -100)
nodes/fragment/41/node = SubResource("VisualShaderNodeFloatParameter_ograv")
nodes/fragment/41/position = Vector2(-1000, 0)
nodes/fragment/46/node = SubResource("VisualShaderNodeMix_vj5he")
nodes/fragment/46/position = Vector2(-220, -480)
nodes/fragment/53/node = SubResource("VisualShaderNodeExpression_isesc")
nodes/fragment/53/position = Vector2(-200, 1100)
nodes/fragment/53/size = Vector2(740, 380)
nodes/fragment/53/input_ports = ""
nodes/fragment/53/output_ports = "0,4,normal_blend;"
nodes/fragment/53/expression = "// time calculations for wave normal map movement
vec2 time = (TIME * wave_direction1) * time_scale;	// movement rate of first wave
vec2 time2 = (TIME * wave_direction2) * time_scale;	// movement rate of second wave

// Blend the two normal maps
normal_blend = mix(texture(texture_normal, world_pos.xz / noise_scale + time).rgb, texture(texture_normal2, world_pos.xz + time2).rgb, 0.5);"
nodes/fragment/54/node = SubResource("VisualShaderNodeExpression_pjf86")
nodes/fragment/54/position = Vector2(-1000, -1100)
nodes/fragment/54/size = Vector2(880, 480)
nodes/fragment/54/input_ports = "0,4,color_deep;1,4,color_shallow;"
nodes/fragment/54/output_ports = "0,4,color;"
nodes/fragment/54/expression = "// Depth variables and calc
float depth_texture = texture(DEPTH_TEXTURE, SCREEN_UV).x;
vec3 ndc = vec3(SCREEN_UV * 2.0 - 1.0, depth_texture);
vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0); 
view.xyz /= view.w;
float depth_blend = exp((-view.z+VERTEX.z + depth_offset) * -beers_law);
depth_blend = clamp(1.0 - depth_blend, 0.0, 1.0);
float depth_blend_power = clamp(pow(depth_blend, 2.5), 0.0, 1.0);
	
// Retreving depth color and applying the deep and shallow colors
vec3 screen_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, depth_blend_power * 2.5).rgb;
vec3 depth_color = mix(color_shallow.rgb, color_deep.rgb, depth_blend_power);
color = mix(screen_color * depth_color, depth_color * 0.25, depth_blend_power * 0.5);"
nodes/fragment/55/node = SubResource("VisualShaderNodeMix_3tg32")
nodes/fragment/55/position = Vector2(240, -540)
nodes/fragment/56/node = SubResource("VisualShaderNodeColorParameter_p5308")
nodes/fragment/56/position = Vector2(-1500, -1020)
nodes/fragment/57/node = SubResource("VisualShaderNodeColorParameter_tjhqu")
nodes/fragment/57/position = Vector2(-1500, -800)
nodes/fragment/58/node = SubResource("VisualShaderNodeInput_el2eh")
nodes/fragment/58/position = Vector2(-2720, 720)
nodes/fragment/59/node = SubResource("VisualShaderNodeExpression_vujdd")
nodes/fragment/59/position = Vector2(-2880, 220)
nodes/fragment/59/size = Vector2(420, 360)
nodes/fragment/59/input_ports = ""
nodes/fragment/59/output_ports = "0,3,wave_direct1;1,3,wave_direct2;2,0,time_scal;3,3,world_position;"
nodes/fragment/59/expression = "wave_direct1 = wave_direction1;
wave_direct2 = wave_direction2;
time_scal = time_scale;
world_position = world_pos.xz / noise_scale;
"
nodes/fragment/60/node = SubResource("VisualShaderNodeFloatOp_gdg2l")
nodes/fragment/60/position = Vector2(-2380, 680)
nodes/fragment/61/node = SubResource("VisualShaderNodeColorParameter_w3cyd")
nodes/fragment/61/position = Vector2(-1260, 100)
nodes/fragment/62/node = SubResource("VisualShaderNodeMix_ai8em")
nodes/fragment/62/position = Vector2(-20, -460)
nodes/fragment/63/node = SubResource("VisualShaderNodeFloatParameter_5ojcq")
nodes/fragment/63/position = Vector2(-1300, 580)
nodes/fragment/64/node = SubResource("VisualShaderNodeFloatParameter_ndcm7")
nodes/fragment/64/position = Vector2(300, 800)
nodes/fragment/65/node = SubResource("VisualShaderNodeProximityFade_587a6")
nodes/fragment/65/position = Vector2(-1560, -1520)
nodes/fragment/66/node = SubResource("VisualShaderNodeFloatFunc_hhvxq")
nodes/fragment/66/position = Vector2(-1340, -1520)
nodes/fragment/68/node = SubResource("VisualShaderNodeInput_5u5go")
nodes/fragment/68/position = Vector2(-1220, -1840)
nodes/fragment/69/node = SubResource("VisualShaderNodeFloatOp_40sev")
nodes/fragment/69/position = Vector2(-540, -1780)
nodes/fragment/70/node = SubResource("VisualShaderNodeFloatFunc_6noys")
nodes/fragment/70/position = Vector2(-340, -1760)
nodes/fragment/72/node = SubResource("VisualShaderNodeVectorOp_pstdn")
nodes/fragment/72/position = Vector2(-2360, 480)
nodes/fragment/78/node = SubResource("VisualShaderNodeFloatOp_kifhl")
nodes/fragment/78/position = Vector2(-360, -1620)
nodes/fragment/79/node = SubResource("VisualShaderNodeFloatOp_4mmds")
nodes/fragment/79/position = Vector2(-380, -1340)
nodes/fragment/80/node = SubResource("VisualShaderNodeFloatOp_tsi4f")
nodes/fragment/80/position = Vector2(220, -1380)
nodes/fragment/82/node = SubResource("VisualShaderNodeFloatConstant_nauul")
nodes/fragment/82/position = Vector2(-740, -1620)
nodes/fragment/83/node = SubResource("VisualShaderNodeMultiplyAdd_nm88d")
nodes/fragment/83/position = Vector2(-740, -1800)
nodes/fragment/84/node = SubResource("VisualShaderNodeMix_omqtp")
nodes/fragment/84/position = Vector2(760, -1080)
nodes/fragment/85/node = SubResource("VisualShaderNodeReroute_5c2os")
nodes/fragment/85/position = Vector2(-880, 240)
nodes/fragment/88/node = SubResource("VisualShaderNodeTexture_tb3wm")
nodes/fragment/88/position = Vector2(-80, -2440)
nodes/fragment/89/node = SubResource("VisualShaderNodeVectorOp_8csm5")
nodes/fragment/89/position = Vector2(600, -1900)
nodes/fragment/90/node = SubResource("VisualShaderNodeUVFunc_7jm2e")
nodes/fragment/90/position = Vector2(-420, -2380)
nodes/fragment/91/node = SubResource("VisualShaderNodeUVFunc_5yx47")
nodes/fragment/91/position = Vector2(-420, -2100)
nodes/fragment/92/node = SubResource("VisualShaderNodeInput_7n8no")
nodes/fragment/92/position = Vector2(-1300, -2000)
nodes/fragment/93/node = SubResource("VisualShaderNodeExpression_mwsgt")
nodes/fragment/93/position = Vector2(-1400, -2500)
nodes/fragment/93/size = Vector2(420, 360)
nodes/fragment/93/input_ports = ""
nodes/fragment/93/output_ports = "0,3,wave_direct1;1,3,wave_direct2;2,0,time_scal;3,3,world_position;"
nodes/fragment/93/expression = "wave_direct1 = wave_direction1;
wave_direct2 = wave_direction2;
time_scal = time_scale;
world_position = world_pos.xz / noise_scale;
"
nodes/fragment/94/node = SubResource("VisualShaderNodeFloatOp_a3ld1")
nodes/fragment/94/position = Vector2(-960, -2040)
nodes/fragment/95/node = SubResource("VisualShaderNodeVectorOp_wj8vf")
nodes/fragment/95/position = Vector2(-940, -2240)
nodes/fragment/96/node = SubResource("VisualShaderNodeTexture_ifwh1")
nodes/fragment/96/position = Vector2(-100, -2140)
nodes/fragment/98/node = SubResource("VisualShaderNodeFloatOp_wrlom")
nodes/fragment/98/position = Vector2(40, -1560)
nodes/fragment/99/node = SubResource("VisualShaderNodeIf_5qa8l")
nodes/fragment/99/position = Vector2(660, -1480)
nodes/fragment/100/node = SubResource("VisualShaderNodeFloatParameter_54p5i")
nodes/fragment/100/position = Vector2(-1220, -1740)
nodes/fragment/101/node = SubResource("VisualShaderNodeFloatParameter_blrca")
nodes/fragment/101/position = Vector2(-1880, -1520)
nodes/fragment/102/node = SubResource("VisualShaderNodeFloatFunc_xpf1u")
nodes/fragment/102/position = Vector2(-160, -1760)
nodes/fragment/103/node = SubResource("VisualShaderNodeIf_5fdnu")
nodes/fragment/103/position = Vector2(-480, 300)
nodes/fragment/104/node = SubResource("VisualShaderNodeColorParameter_8kbhe")
nodes/fragment/104/position = Vector2(320, -1100)
nodes/fragment/105/node = SubResource("VisualShaderNodeVectorOp_m5kxp")
nodes/fragment/105/position = Vector2(140, -2280)
nodes/fragment/106/node = SubResource("VisualShaderNodeVectorOp_3ndru")
nodes/fragment/106/position = Vector2(340, -2280)
nodes/fragment/107/node = SubResource("VisualShaderNodeFloatConstant_vyc5r")
nodes/fragment/107/position = Vector2(180, -2080)
nodes/fragment/108/node = SubResource("VisualShaderNodeClamp_y0qtt")
nodes/fragment/108/position = Vector2(420, -1360)
nodes/fragment/connections = PackedInt32Array(40, 0, 46, 2, 5, 0, 46, 0, 38, 0, 0, 3, 37, 0, 0, 2, 41, 0, 40, 3, 56, 0, 54, 0, 57, 0, 54, 1, 5, 0, 4, 0, 18, 0, 24, 1, 58, 0, 60, 0, 59, 2, 60, 1, 2, 0, 7, 0, 12, 0, 7, 1, 7, 0, 18, 0, 10, 0, 12, 0, 60, 0, 10, 2, 59, 1, 10, 1, 8, 0, 2, 0, 59, 0, 8, 1, 60, 0, 8, 2, 59, 3, 8, 0, 23, 0, 46, 1, 46, 0, 62, 0, 4, 0, 62, 1, 53, 0, 0, 9, 63, 0, 18, 1, 62, 0, 55, 1, 64, 0, 0, 4, 65, 0, 66, 0, 36, 0, 0, 1, 59, 3, 72, 0, 72, 0, 10, 0, 54, 0, 55, 0, 69, 0, 70, 0, 66, 0, 78, 1, 79, 0, 80, 1, 82, 0, 69, 1, 68, 0, 83, 0, 66, 0, 83, 2, 83, 0, 69, 0, 55, 0, 84, 0, 61, 0, 85, 0, 85, 0, 24, 0, 92, 0, 94, 0, 93, 2, 94, 1, 94, 0, 91, 2, 93, 1, 91, 1, 93, 0, 90, 1, 94, 0, 90, 2, 93, 3, 90, 0, 93, 3, 95, 0, 95, 0, 91, 0, 90, 0, 88, 0, 91, 0, 96, 0, 100, 0, 83, 1, 101, 0, 65, 0, 70, 0, 102, 0, 102, 0, 78, 0, 18, 0, 103, 0, 104, 0, 84, 1, 85, 0, 103, 3, 85, 0, 103, 4, 24, 0, 4, 1, 98, 0, 80, 0, 88, 0, 105, 0, 96, 0, 105, 1, 105, 0, 106, 0, 106, 0, 89, 0, 106, 0, 98, 0, 107, 0, 106, 1, 66, 0, 98, 1, 84, 0, 0, 0, 99, 0, 99, 0, 66, 0, 79, 0, 80, 0, 108, 0, 108, 0, 84, 2)
